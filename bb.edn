{:deps {io.github.babashka/sci.nrepl {:mvn/version "0.0.2"}
        org.babashka/http-server {:mvn/version "0.1.13"}
        org.babashka/cli {:mvn/version "0.2.23"}
        etaoin/etaoin {:mvn/version "1.1.43"}}

 :paths ["test"]

 :tasks
 {:requires ([babashka.cli :as cli]
             [sci.nrepl.browser-server :as nrepl]
             [taoensso.timbre :as timbre])

  deps-download (println :downloading-deps...)

  ;; babashka http
  :init (def cli-opts (cli/parse-opts *command-line-args* {:coerce {:port :int :headers :edn}}))
  serve {:doc "Serve static assets"
         :requires ([babashka.http-server :as server])
         :task (server/exec (merge {:port 8001
                                    :dir "."}
                                   cli-opts))}
  prn {:task (clojure "-X clojure.core/prn" cli-opts)}
  -dev {:depends [serve prn]}
  test-server {:task (run '-dev {:parallel true})}

  nrepl {:task (let [nrepl-port 1339
                     websocket-port 1340
                     nrepl-server (nrepl/start-nrepl-server! {:port nrepl-port})
                     ws-server (nrepl/start-websocket-server! {:port websocket-port})]
                 (deref nrepl-server))}

  ;; bb test-ui --vars my-test/my-second-test
  test-ui {:extra-paths ["test"]
           :extra-deps {io.github.cognitect-labs/test-runner
                        {:git/tag "v0.5.1" :git/sha "dfb30dd"}}
           :task (exec 'cognitect.test-runner.api/test)
           :exec-args {:dirs ["test/scittlets" "test/scripts"]}
           :org.babashka/cli {:coerce {:nses [:symbol]
                                       :vars [:symbol]}}}}}
